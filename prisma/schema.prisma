generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OderStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  role Role @default(USER)

  address Address?
  cart Cart[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Address {
  id Int @id @default(autoincrement())
  address String
  complement String @default("")
  postalCode Int
  city String
  country String
  user User @relation(fields: [userId], references: [id])
  userId Int @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Product {
  id Int @id @default(autoincrement())
  name String
  description String @default("") @db.Text
  price Decimal
  tags String @default("")

  carts ProductInCart[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Cart {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int

  order Order?
  products ProductInCart[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

model ProductInCart {
  productId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId Int

  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Clé primaire composée pour éviter les doublons
  @@id([productId, cartId])
  @@map("products_in_carts")
}

model Order {
  id Int @id @default(autoincrement())
  status OderStatus @default(PENDING)

  cart Cart @relation(fields: [cartId], references: [id])
  cartId Int @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("orders")
}